8. calculate_total_stock_value_of_product procedure that calculates and prints the total value of stock based on the price and stock quantity for a product.


-- Connect to ABXCompany database
\c ABXCompany

-- Step 1: Create the products table
CREATE TABLE IF NOT EXISTS products (
    product_id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    price NUMERIC(10, 2) NOT NULL,
    stock_quantity INT NOT NULL
);

-- Step 2: Procedure to add a product
CREATE OR REPLACE PROCEDURE add_product(
    IN product_name TEXT,
    IN product_price NUMERIC,
    IN product_stock INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO products(name, price, stock_quantity)
    VALUES (product_name, product_price, product_stock);
END;
$$;

-- Step 3: Procedure to get product by ID
CREATE OR REPLACE PROCEDURE get_product_by_id(
    IN p_id INT,
    OUT p_name TEXT,
    OUT p_price NUMERIC,
    OUT p_stock INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT name, price, stock_quantity
    INTO p_name, p_price, p_stock
    FROM products
    WHERE product_id = p_id;

    IF NOT FOUND THEN
        RAISE NOTICE 'No product found with ID: %', p_id;
        p_name := NULL;
        p_price := NULL;
        p_stock := NULL;
    END IF;
END;
$$;

-- Step 4: Procedure to update product stock
CREATE OR REPLACE PROCEDURE update_product_stock(
    IN p_id INT,
    IN new_stock INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE products
    SET stock_quantity = new_stock
    WHERE product_id = p_id;

    IF NOT FOUND THEN
        RAISE NOTICE 'No product found with ID: %', p_id;
    ELSE
        RAISE NOTICE 'Stock updated for product ID %: New stock = %', p_id, new_stock;
    END IF;
END;
$$;

-- Step 5: Procedure to delete a product
CREATE OR REPLACE PROCEDURE delete_product(
    IN p_id INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    DELETE FROM products
    WHERE product_id = p_id;

    IF NOT FOUND THEN
        RAISE NOTICE 'No product found to delete with ID: %', p_id;
    ELSE
        RAISE NOTICE 'Product with ID % deleted successfully.', p_id;
    END IF;
END;
$$;

-- Step 6: Procedure to calculate and print total stock value
CREATE OR REPLACE PROCEDURE calculate_total_stock_value_of_product(
    IN p_id INT
)
LANGUAGE plpgsql
AS $$
DECLARE
    p_name TEXT;
    p_price NUMERIC;
    p_stock INT;
    total_value NUMERIC;
BEGIN
    SELECT name, price, stock_quantity
    INTO p_name, p_price, p_stock
    FROM products
    WHERE product_id = p_id;

    IF NOT FOUND THEN
        RAISE NOTICE 'No product found with ID: %', p_id;
    ELSE
        total_value := p_price * p_stock;
        RAISE NOTICE 'Total stock value for product "%" (ID %): %', p_name, p_id, total_value;
    END IF;
END;
$$;

-- Step 7: Insert a sample product
CALL add_product('Whey Protein', 49.99, 100);

-- Step 8: Calculate and display total stock value
CALL calculate_total_stock_value_of_product(1);
